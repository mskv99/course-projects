# -*- coding: utf-8 -*-
"""hw_laplace_dist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K3jCWMNpDiPmhJaO5_AAbesJV7rN4LPO
"""

import numpy as np

class LaplaceDistribution:    
    @staticmethod
    def mean_abs_deviation_from_median(x: np.ndarray):
        '''
        Args:
        - x: A numpy array of shape (n_objects, n_features) containing the data
          consisting of num_train samples each of dimension D.
        '''
        ####
        # Do not change the class outside of this block
        # Your code here
        ####
        result = 0
        mu = np.median(x, axis=0)
        
        for i in range(x.shape[1]):
          result = (x[:,i] - mu).sum()

        return result/x.shape[0]

    def __init__(self, features):
        '''
        Args:
            feature: A numpy array of shape (n_objects, n_features). Every column represents all available values for the selected feature.
        '''
        ####
        # Do not change the class outside of this block
        self.loc = np.median(features, axis=0)
        result = 0


        self.scale = self.mean_abs_deviation_from_median(features)
        ####


    def logpdf(self, values):
        '''
        Returns logarithm of probability density at every input value.
        Args:
            values: A numpy array of shape (n_objects, n_features). Every column represents all available values for the selected feature.
        '''
        ####
        # Do not change the class outside of this block
        return -np.log(2 * self.scale) - (abs(values - self.loc))/self.scale
        ####
        
    
    def pdf(self, values):
        '''
        Returns probability density at every input value.
        Args:
            values: A numpy array of shape (n_objects, n_features). Every column represents all available values for the selected feature.
        '''
        return np.exp(self.logpdf(values))

a = np.array([
  [1,2,3],
  [4,5,6],
  [7,8,9]

])
a.shape

a.mean(axis=0)

a.mean(axis=1)

loc = np.median(a,axis=0)
loc

k = 0
for i in range(3):
  k = abs(a[:,i] - loc).sum()
print(k)

a[:,1]

